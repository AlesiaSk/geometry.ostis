sc_node_not_relation -> struct_Parallelogram_A_B_C_D;;

struct_Parallelogram_A_B_C_D => nrel_main_idtf:
	[Параллелограмм ABCD]
	(*
	<- lang_ru;;
	*);
	[Parallelogram ABCD]
	(*
	<- lang_en;;
	*);;

struct_Parallelogram_A_B_C_D => nrel_idtf:[Параллелограмм(A; B; C; D)](*<-lang_ru;;*);;

struct_Parallelogram_A_B_C_D => nrel_idtf:[Параллелограмм, вершинами которого являются Точка A, Точка B, Точка С и Точка D](*<-lang_ru;;*);;

struct_Parallelogram_A_B_C_D <- concept_parallelogram;;

sc_node_not_relation -> struct_Geometric_point_A;;
sc_node_not_relation -> struct_Geometric_point_B;;
sc_node_not_relation -> struct_Geometric_point_C;;
sc_node_not_relation -> struct_Geometric_point_D;;

struct_Geometric_point_A <- concept_geometric_point;;
struct_Geometric_point_B <- concept_geometric_point;;
struct_Geometric_point_C <- concept_geometric_point;;
struct_Geometric_point_D <- concept_geometric_point;;

struct_Parallelogram_A_B_C_D  => nrel_vertex: struct_Geometric_point_A;;
struct_Parallelogram_A_B_C_D  => nrel_vertex: struct_Geometric_point_B;;
struct_Parallelogram_A_B_C_D  => nrel_vertex: struct_Geometric_point_C;;
struct_Parallelogram_A_B_C_D  => nrel_vertex: struct_Geometric_point_D;;

sc_node_not_relation -> struct_Segment_A;;
sc_node_not_relation -> struct_Segment_C;;

struct_Segment_A <- concept_segment;;
struct_Segment_C <- concept_segment;;

struct_Parallelogram_A_B_C_D  => nrel_lateral_side: struct_Segment_A;;
struct_Parallelogram_A_B_C_D  => nrel_lateral_side: struct_Segment_C;;

nrel_congruence -> ... (* -> struct_Segment_A; struct_Segment_C;; *);;
//struct_Segment_A <=> nrel_congruence: struct_Segment_C;;

sc_node_not_relation -> struct_Segment_B;;
sc_node_not_relation -> struct_Segment_D;;

struct_Segment_B <- concept_segment;;
struct_Segment_D <- concept_segment;;

struct_Parallelogram_A_B_C_D  => nrel_base: struct_Segment_B;;
struct_Parallelogram_A_B_C_D  => nrel_base: struct_Segment_D;;

nrel_congruence -> ... (* -> struct_Segment_B; struct_Segment_D;; *);;
//struct_Segment_B <=> nrel_congruence: struct_Segment_D;;

struct_Segment_A => nrel_boundary_point: struct_Geometric_point_A;;
struct_Segment_D => nrel_boundary_point: struct_Geometric_point_A;;

struct_Segment_B => nrel_boundary_point: struct_Geometric_point_B;;
struct_Segment_A => nrel_boundary_point: struct_Geometric_point_B;;

struct_Segment_C => nrel_boundary_point: struct_Geometric_point_C;;
struct_Segment_B => nrel_boundary_point: struct_Geometric_point_C;;

struct_Segment_C => nrel_boundary_point: struct_Geometric_point_D;;
struct_Segment_D => nrel_boundary_point: struct_Geometric_point_D;;

sc_node_not_relation -> struct_Angle_Alpha;;
sc_node_not_relation -> struct_Angle_Beta;;
sc_node_not_relation -> struct_Angle_Gamma;;
sc_node_not_relation -> struct_Angle_Sigma;;

struct_Angle_Alpha <- concept_angle;;
struct_Angle_Beta <- concept_angle;;
struct_Angle_Gamma <- concept_angle;;
struct_Angle_Sigma <- concept_angle;;

struct_Parallelogram_A_B_C_D  => nrel_internal_angle: struct_Angle_Alpha;;
struct_Parallelogram_A_B_C_D  => nrel_internal_angle: struct_Angle_Beta;;
struct_Parallelogram_A_B_C_D  => nrel_internal_angle: struct_Angle_Gamma;;
struct_Parallelogram_A_B_C_D  => nrel_internal_angle: struct_Angle_Sigma;;

nrel_congruence -> ... (* -> struct_Angle_Alpha; struct_Angle_Gamma;; *);;
nrel_congruence -> ... (* -> struct_Angle_Sigma; struct_Angle_Beta;; *);;

//struct_Angle_Alpha <=> nrel_congruence: struct_Angle_Gamma;;
//struct_Angle_Sigma <=> nrel_congruence: struct_Angle_Beta;;

struct_Parallelogram_A_B_C_D <- rrel_key_sc_element:
	...
	(*
	=> nrel_main_idtf:[Факт.утв.(Параллелограмм ABCD)](*<-lang_ru;;*);;
	<- sc_statement;;
	<= nrel_sc_text_translation: 
		...
		(*
		-> rrel_example: 
			[ABCD - параллелограмм, четырехугольник.
			Геометрические точки A, B, C и D являются вершинами Параллелограмма ABCD. Отрезки a, c являются боковыми сторонами и равны между собой,а отрезки b, d также равны между собой и являются основаниями Параллелограмма ABCD. Точка A является граничной точкой отрезков a, d. Точка B является граничной точкой отрезков b, a. Точка C является граничной точкой отрезков c, b. Точка D является граничной точкой отрезков c, d. Боковые стороны a, c равны. Основания b, d равны. Углы alpha, beta, gamma, sigma являются внутренним углами Трапеции KLMN. Углы alpha и gamma равны.
			Углы sigma и beta равны. ]
			(* <- lang_ru;; *);;
		*);;
	*);;

struct_Parallelogram_A_B_C_D <- rrel_key_sc_element: 
	...
	(*
		<- sc_image;; 
		<= nrel_sc_text_translation: 
		...
			(*
				-> rrel_example: 
						 "file://Parallelogram ABCD.png";;
			*);; 
	*);; 
