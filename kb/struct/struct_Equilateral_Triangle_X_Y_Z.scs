sc_node_not_relation -> struct_Equilateral_triangle_X_Y_Z;;

struct_Equilateral_Triangle_X_Y_Z => nrel_main_idtf:
	[Равносторонний треугольник XYZ]
	(*
	<- lang_ru;;
	*);
	[Equilateral Triangle XYZ]
	(*
	<- lang_en;;
	*);;

struct_Equilateral_triangle_X_Y_Z => nrel_idtf:[Тр-к(X; Y; Z)](*<-lang_ru;;*);;

struct_Equilateral_triangle_X_Y_Z => nrel_idtf:[Правильный треугольник(X; Y; Z)](*<-lang_ru;;*);;

struct_Equilateral_triangle_X_Y_Z => nrel_idtf:[Равносторонний треугольник(X; Y; Z)](*<-lang_ru;;*);;

struct_Equilateral_triangle_X_Y_Z => nrel_idtf:[Треугольник, вершинами которого являются Точка X, Точка Y, Точка Z](*<-lang_ru;;*);;

struct_Equilateral_triangle_X_Y_Z <- concept_equilateral_triangle;;

sc_node_not_relation -> struct_Geometric_point_X;;
sc_node_not_relation -> struct_Geometric_point_Y;;
sc_node_not_relation -> struct_Geometric_point_Z;;

struct_Geometric_point_X <- concept_geometric_point;;
struct_Geometric_point_Y <- concept_geometric_point;;
struct_Geometric_point_Z <- concept_geometric_point;;

struct_Equilateral_triangle_X_Y_Z => nrel_vertex: struct_Geometric_point_X;;
struct_Equilateral_triangle_X_Y_Z => nrel_vertex: struct_Geometric_point_Y;;
struct_Equilateral_triangle_X_Y_Z => nrel_vertex: struct_Geometric_point_Z;;

sc_node_not_relation -> struct_Segment_X;;
sc_node_not_relation -> struct_Segment_Y;;
sc_node_not_relation -> struct_Segment_Z;;

struct_Segment_X <- concept_segment;;
struct_Segment_Y <- concept_segment;;
struct_Segment_Z <- concept_segment;;

struct_Equilateral_triangle_X_Y_Z => nrel_side: struct_Segment_X;;
struct_Equilateral_triangle_X_Y_Z => nrel_side: struct_Segment_Y;;
struct_Equilateral_triangle_X_Y_Z => nrel_side: struct_Segment_Z;;

nrel_congruence -> ... (* -> struct_Segment_Y; struct_Segment_X; struct_Segment_Z;; *);;

sc_node_not_relation -> struct_Angle_Alpha;;
sc_node_not_relation -> struct_Angle_Beta;;
sc_node_not_relation -> struct_Angle_Gamma;;

struct_Angle_Alpha <- concept_angle;;
struct_Angle_Beta <- concept_angle;;
struct_Angle_Gamma <- concept_angle;;

struct_Equilateral_triangle_X_Y_Z => nrel_internal_angle:struct_Angle_Alpha;;
struct_Equilateral_triangle_X_Y_Z => nrel_internal_angle:struct_Angle_Beta;;
struct_Equilateral_triangle_X_Y_Z => nrel_internal_angle:struct_Angle_Gamma;;

nrel_congruence -> ... (* -> struct_Angle_Alpha; struct_Angle_Gamma; struct_Angle_Beta;;*);;

struct_Segment_Y => nrel_boundary_point: struct_Geometric_point_X;;
struct_Segment_Z => nrel_boundary_point: struct_Geometric_point_X;;

struct_Segment_X => nrel_boundary_point: struct_Geometric_point_Y;;
struct_Segment_Z => nrel_boundary_point: struct_Geometric_point_Y;;

struct_Segment_X => nrel_boundary_point: struct_Geometric_point_Z;;
struct_Segment_Y => nrel_boundary_point: struct_Geometric_point_Z;;

struct_Equilateral_triangle_X_Y_Z <- rrel_key_sc_element: 
	...
		(*
		<- sc_image;;
		<= nrel_sc_text_translation:
		...
		(*
			-> rrel_example:
				"file://images/Triangle XYZ.png";;
		*);;
	*);;

struct_Equilateral_triangle_X_Y_Z  <- rrel_key_sc_element:
	...
	(*
	=> nrel_main_idtf: [Факт.утв.(Равносторонний треугольник XYZ)];;
	<- sc_statement;;
	<= nrel_sc_text_translation: 
		...
		(*
		-> rrel_example: 
			[Треугольник XYZ является равносторонним,Геометрические точки X, Y и Z являются вершинами Треугольника XYZ. Отрезки x, y и z являются сторонами Треугольника XYZ. Углы alpha, beta, gamma являются внутренним углами Треугольника XYZ. Углы alpha, beta и gamma равны. Отрезки x, y и z равны. Точка X является граничной точкой отрезков y, z. Точка Y является граничной точкой отрезков x, z.
Точка Z является граничной точкой отрезков x, y. ]
			(* <- lang_ru;; *);;
		*);;
	*);;



