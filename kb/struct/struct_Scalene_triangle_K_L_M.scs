sc_node_struct -> struct_Scalene_triangle_K_L_M;;

struct_Scalene_triangle_K_L_M =>  nrel_main_idtf: [Разносторонний треугольник KLM] (* <- lang_ru;; *);;
struct_Scalene_triangle_K_L_M =>  nrel_main_idtf: [Scalene triangle KLM] (* <- lang_en;; *);;

struct_Scalene_triangle_K_L_M =>  nrel_idtf: [Тр-к (K; L; M)] (* <- lang_ru;; *);;

struct_Scalene_triangle_K_L_M =>  nrel_idtf: [Разносторонний треугольник(K; L; M)] (* <- lang_ru;; *);;

struct_Scalene_triangle_K_L_M =>  nrel_idtf: [Треугольник, вершинами которого являются Точка K, Точка L, Точка M] (* <- lang_ru;; *);;

struct_Scalene_triangle_K_L_M <- concept_scalene_triangle;;

sc_node_struct -> struct_Geometric_point_K;;
sc_node_struct -> struct_Geometric_point_L;;
sc_node_struct -> struct_Geometric_point_M;;

struct_Geometric_point_K <- concept_geometric_point;;
struct_Geometric_point_L <- concept_geometric_point;;
struct_Geometric_point_M <- concept_geometric_point;;

struct_Scalene_triangle_K_L_M => nrel_vertex: struct_Geometric_point_K;;
struct_Scalene_triangle_K_L_M => nrel_vertex: struct_Geometric_point_L;;
struct_Scalene_triangle_K_L_M => nrel_vertex: struct_Geometric_point_M;;

sc_node_struct -> struct_Segment_K;;
sc_node_struct -> struct_Segment_L;;
sc_node_struct -> struct_Segment_M;;

 struct_Segment_K <- concept_segment;;
 struct_Segment_L <- concept_segment;;
 struct_Segment_M <- concept_segment;;

struct_Scalene_triangle_K_L_M => nrel_side: struct_Segment_K;;
struct_Scalene_triangle_K_L_M => nrel_side: struct_Segment_L;;
struct_Scalene_triangle_K_L_M => nrel_side: struct_Segment_M;;

struct_Segment_M => nrel_boundary_point: struct_Geometric_point_K;;
struct_Segment_L => nrel_boundary_point: struct_Geometric_point_K;;

struct_Segment_M => nrel_boundary_point: struct_Geometric_point_L;;
struct_Segment_K => nrel_boundary_point: struct_Geometric_point_L;;

struct_Segment_L => nrel_boundary_point: struct_Geometric_point_M;;
struct_Segment_K => nrel_boundary_point: struct_Geometric_point_M;;

sc_node_struct -> struct_Acute_angle_Alpha;;
sc_node_struct -> struct_Acute_angle_Beta;;
sc_node_struct -> struct_Acute_angle_Gamma;;

struct_Acute_angle_Alpha <- concept_acute_angle;;
struct_Acute_angle_Beta <- concept_acute_angle;;
struct_Acute_angle_Gamma <- concept_acute_angle;;

struct_Scalene_triangle_K_L_M => nrel_internal_angle: struct_Acute_angle_Alpha;;
struct_Scalene_triangle_K_L_M => nrel_internal_angle: struct_Acute_angle_Beta;;
struct_Scalene_triangle_K_L_M => nrel_internal_angle: struct_Acute_angle_Gamma;;

struct_Scalene_triangle_K_L_M <- rrel_key_sc_element: 
...
(*
<- sc_illustration;;
<= nrel_sc_text_translation:
...
(*
-> rrel_example:
"file://images/Scalene_triangle_K_L_M.png";;
*);;
*);;


struct_Scalene_triangle_K_L_M  <- rrel_key_sc_element:
	...
	(*
	=> nrel_main_idtf: [Факт. утв.(Разносторонний треугольник KLM)] (* <- lang_ru;; *);;
	<- sc_statement;;
	<= nrel_sc_text_translation: 
		...
		(*
		-> rrel_example: 
			[Треугольник KLM является разносторонним,
Геометрические точки K, L и M являются вершинами Треугольника KLM. Отрезки k, l и m являются сторонами Треугольника KLM. Точка K является граничной точкой отрезков m, l. Точка L является граничной точкой отрезков m, k. Точка M является граничной точкой отрезков l, k. Углы  alpha,  beta,  gamma острые углы.
Углы  alpha,  beta,  gamma являются внутренним углами Треугольника KLM.]
			(* <- lang_ru;; *);;
		*);;
	*);;
